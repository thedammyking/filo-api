
You are an expert in NestJS, TypeOrm, TypeScript, PostgreSQL, Redis, and cloud API integrations. 

For this project, follow these specific rules:

### General Guidelines
- Write clean, modular, and maintainable TypeScript code.
- Use Dependency Injection (DI) patterns and services in NestJS to promote reusability.
- Follow RESTful API conventions for endpoint design and responses.
- Prioritize scalability and performance in all implementations.

### Backend Design (NestJS)
- For each module:
  - Include controllers, services, and DTOs for proper separation of concerns.
  - Use Bull.js with Redis for task queueing and background processing.
  - Use TypeOrm for database operations.
  - Better Auth for authentication and authorization.
  - Implement error handling using NestJS filters and interceptors.
  - Leverage streaming for file uploads directly from URLs or torrents to cloud providers.

- Example module structure:
  - **Auth Module**:
    - Use Auth0 for user authentication.
    - Implement guards for protected routes.
  - **Uploads Module**:
    - Manage uploads and their statuses.
    - Support streaming directly to cloud storage providers using readable streams.
  - **Task Module**:
    - Manage tasks for file uploads, including status tracking.
    - Support streaming directly to cloud storage providers using readable streams.
  - **Cloud Provider Module**:
    - Abstract integrations with Google Drive, Dropbox, and other providers.
    - Use a factory pattern to add new providers easily.

### Frontend Design (React.js)
- Use React components with hooks to manage state and lifecycle.
- Implement forms for:
  - Local file uploads.
  - URL and torrent/magnet link submissions.
  - Cloud provider connections.
- Use Axios to communicate with the backend and manage API calls.

### API Design
- Return consistent HTTP status codes and JSON responses:
  - 200 for success.
  - 400 for bad requests with detailed error messages.
  - 500 for internal server errors with meaningful logs.
- Implement pagination and filtering for task listing endpoints.

### Database Design
- Use PostgreSQL with TypeORM for schema management:
  - Create entities for `users`, `tasks`, and `cloud_providers`.
  - Use Redis for caching frequently accessed data, such as task progress.
- Example schema for tasks:
  ```sql
  CREATE TABLE tasks (
      id SERIAL PRIMARY KEY,
      user_id INT REFERENCES users(id),
      provider VARCHAR(50),
      file_name VARCHAR(255),
      file_url TEXT,
      status VARCHAR(20),
      progress INT DEFAULT 0
  );
  ```

### Streaming Uploads
- Use Axios to stream files directly from URLs or torrents to cloud providers.
- Handle interruptions with resumable uploads (e.g., Google Drive's resumable upload API).
- Add retry logic for failed streams.

### Error Handling
- Ensure all errors are logged with meaningful messages and stack traces.
- Return user-friendly error messages for API consumers.

### Testing and Deployment
- Write unit tests for all modules using Jest (built-in with NestJS).
- Mock external API calls (e.g., cloud provider APIs) during testing.
- Use Docker for containerization and CI/CD pipelines for deployment.

### Additional Notes
- Prioritize security:
  - Use environment variables for sensitive configurations.
  - Validate all user inputs to prevent injection attacks.
- Optimize for performance:
  - Use caching for repeated tasks or data retrieval.
  - Minimize server-side storage by streaming files directly to cloud providers.

By following these rules, ensure that the AI-generated code aligns with this project's architecture and API design.
